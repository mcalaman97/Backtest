
import yfinance as yf
import pandas as pd
import numpy as np
import datetime
import datetime as dt
from scipy.optimize import minimize
from dateutil.relativedelta import relativedelta
import urllib.request
import zipfile


class Portfolio:
    """This is the class is an object containing actual portfolio.
    The strategy is to decide the weights of the portfolio is not defined in this class.
    A Portfolio object has weights that are updated using the method rebalance.
    Returns Data are loaded from yahoo finance.
    start_date: string in the "YYYY-MM-DD" format --> start date of the backtest
    end_date: string in the "YYYY-MM-DD" format --> start date of the backtest
    investment_universe: list of tickers used throughout the life of the portfolio  
    ptf_size: int --> dollar size of the ptf at inception
    monthly_data: string --> optional parameter, if different from 'N', then the function loads monthly data"""
    
    def __init__(self, start_date, end_date, investment_universe,  ptf_size, monthly_data = "N"):
        # initialating the class
        # here I am creating a few attributes with the specifications of the backtest
        self.ptf_size = ptf_size
        self.start_date = start_date
        self.end_date = end_date
        self.investment_universe = investment_universe
        self.tickers = investment_universe + ["CASH"]
        # loading data from yahoo finance
        if (monthly_data != "N"):
            self.raw_prices = self.__load_monthly_prices_from_yahoo_finance(self.investment_universe, 
                                    start = self.start_date, end = end_date)
        else:
            self.raw_prices = self.__load_prices_from_yahoo_finance(self.investment_universe, start = self.start_date,
                                                end = end_date)
        # creating the matrices of prices, returns and weights
        self.prices = self.__format_yahoo_finance_prices(self.raw_prices)
        self.returns = self.prices.pct_change().iloc[1:,:].copy()
        self.returns["CASH"] = 0
        self.returns.index = pd.to_datetime(self.returns.index).date
        self.dates = [date for date in pd.to_datetime(self.prices.index).date]
        self.w = pd.DataFrame(0, index = self.dates, columns = self.tickers)
        self.w["CASH"] = 1
        self.w.columns = self.returns.columns
        self._get_index_levels()
        
    def __load_prices_from_yahoo_finance(self, list_tickers, start, end):
        """ This function loads data from yahoo finance if the frequqency of data is not specified (default frequency: daily)"""
        return yf.download(list_tickers , start = start, end=end, group_by='tickers')
    
    def __load_monthly_prices_from_yahoo_finance(self, list_tickers, start, end):
        """ This function loads data from yahoo finance if the frequqency of data is monthly data"""
        data_prices = yf.download(list_tickers , start = start, end=end, interval='1mo', group_by='tickers')
        data_prices = data_prices.dropna(axis=0,how='any')
        return data_prices
 
    def __format_yahoo_finance_prices(self, df):
        """ This method formats the raw data loaded from yahoo finanace"""
        dx = df.iloc[:, (df.columns.get_level_values(1) == "Adj Close")].copy()
        dx.columns = dx.columns.droplevel(1)
        return dx
    
    def _get_index_levels(self):
        """ this method computes period and cumulative portfolio returns based of the matrix of weights self.w and matrix of returns self.returns"""
        mat_w = self.w.iloc[:-1,].copy()
        mat_w.index = self.returns.index
        self.index_levels = ((mat_w * (self.returns + 1)).sum(1)).cumprod()
        self.index_returns = ((mat_w * (self.returns + 1)).sum(1)) - 1

    def rebalance(self, rebal_date, dict_ticker_w):
        """ This is the method used to update the matrix of weights once a new trade is inserted
        rebal_date: datetime.date, this is the date where I am going to modify the portfolio weights (assumption, trade happens as marte close the previous day)
        dict_ticker_w: dictionary, this contains the weights of the new portfolio. each key is a ticker of one of the constituents of the portfolio,
         each value is its associated weight in the portfolio. If a security in the investment_universe is not in this dictionary, then it gets a weight equal to zero"""
        # this is the row of weights that I want to update in the matrix of weights self.w
        row = self.w.loc[rebal_date]
        # update the weights for the identifiers in the dictionary
        row.update(pd.Series(dict_ticker_w))
        # set the weights for identifiers not in the dictionary to 0
        for col in self.w.columns:
            if col not in dict_ticker_w.keys():
                row[col] = 0
        # update the row in the matrix
        self.w.loc[rebal_date] = row
        # now I need to update the rest of the matrix of weights
        # in fact, there is path-dependecy and most recent weights will depend of the new set of weights and future returns
        # weights at time T1 will be weights at time T0 times returns from T0 to T1... Divided by their sum
        # I start by updating weights at time 0 as the trade has effectively happened at the end of t-1
        self.w.loc[rebal_date] = (self.w.loc[rebal_date] * (self.returns.loc[rebal_date] + 1))
        self.w.loc[rebal_date] = self.w.loc[rebal_date].div(self.w.loc[rebal_date].sum())
        # then I update the rest of the matrix of weights
        self.w.loc[(self.w.index > rebal_date)] = (self.returns[(self.returns.index > rebal_date)] + 1) 
        self.w.loc[(self.w.index >= rebal_date)] = self.w.loc[(self.w.index >= rebal_date)].cumprod(axis = 0) 
        self.w = self.w.div(self.w.sum(1), axis=0)
        self._get_index_levels()



        
class InvestmentStrategy(Portfolio):
    """ This is child class will serve as blueprint for the various investment strategies that we are going to implement. 
    The logic is to separate the backtesting engine from anything related to the actual strategy. 
    In particular, I am using this function to host all the method to load specific datasets that are not strictly related to the backetest itself."""
    def __init__(self, start_date, end_date, investment_universe,  ptf_size , monthly_data = "N"):
        super().__init__(start_date, end_date, investment_universe,  ptf_size, monthly_data)
    
    def load_FF_returns(self):
        print("Loading Fama French Returns")
        ff_url = "https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_CSV.zip"
        # Download the file and save it
        # We will name it fama_french.zip file
        urllib.request.urlretrieve(ff_url,'fama_french.zip')
        zip_file = zipfile.ZipFile('fama_french.zip', 'r')
        # Next we extact the file data
        # We will call it ff_factors.csv
        zip_file.extractall()
        # Make sure you close the file after extraction
        zip_file.close()
        ff_factors = pd.read_csv('F-F_Research_Data_Factors.csv', skiprows = 3)
        ff_factors = ff_factors.loc[ff_factors.index < (ff_factors[(ff_factors["Unnamed: 0"] == " Annual Factors: January-December ")].index[0])]
        ff_factors["year"] = (ff_factors["Unnamed: 0"].str[:4]).astype("int")
        ff_factors["month"] = (ff_factors["Unnamed: 0"].str[4:6]).astype("int")
        ff_factors["day"] = 1
        ff_factors["date"] = pd.to_datetime(ff_factors[['year', 'month', 'day']])
        ff_factors = ff_factors.set_index("date")
        ff_factors = ff_factors[["Mkt-RF","SMB","HML","RF"]].astype("float")
        ff_factors = ff_factors.loc[(ff_factors.index.date>=min(self.returns.index))&(ff_factors.index.date<=max(self.returns.index))]/100
        self.ff_factors = ff_factors
        print("Fama French Returns loaded")
    
    def load_Treasury_Par_Yield_Curve(self, start_year = 2015, read_local_file = True, file_name = "Treasury_Par_Yield_Curve_Rates.csv"):
        # data loading
        if read_local_file == True:
            df_rf = pd.read_csv(file_name)
        else:
            print("Scraping data from the Treasury Department website")
            list_df = [pd.read_csv("https://home.treasury.gov/resource-center/data-chart-center/interest-rates/daily-treasury-rates.csv/" + str(year) + "/all?type=daily_treasury_yield_curve&field_tdr_date_value="+ str(year) + "&page&_format=csv") for year in range(start_year, (datetime.now().year + 1))]
            print("Data loaded! Saving data in the file Treasury_Par_Yield_Curve_Rates_" + str(start_year) + "_" + str(datetime.now().year) + ".csv")
            df_rf = pd.concat(list_df)
            df_rf.to_csv("Treasury_Par_Yield_Curve_Rates_" + str(start_year) + "_" + str(datetime.now().year) + ".csv")
        # data cleaning
        df_rf = df_rf[['Date', '1 Mo', '2 Mo', '3 Mo', '4 Mo', '6 Mo', '1 Yr', '2 Yr', '3 Yr', '5 Yr', '7 Yr',
               '10 Yr', '20 Yr', '30 Yr']]
        df_rf.reset_index(drop = True, inplace = True)
        df_rf.index = df_rf["Date"].apply(pd.to_datetime)
        df_rf.sort_index(inplace=True)
        df_rf.drop("Date", axis = 1, inplace = True)
        df_rf /= 100
        self.rf = df_rf 
        
class RollingSharpeRatio(InvestmentStrategy):
    """This is an investment strategy that uses the 12-month rolling Sharpe Ratio as an alpha signal.
    The idea is that when markets reach a given level in terms of risk adjusted returns, then PMs may want to deleverage a bit.
    This is strategy is UW momentum.
    This class is a child class of InvestmentStrategy.
    The most important method of this strategy is run_strategy()"""
    def __init__(self, start_date, end_date, investment_universe,  ptf_size ,   monthly_data = "Y"):
        super().__init__(start_date, end_date, investment_universe,  ptf_size, monthly_data)
    
    def run_strategy(self, reference_index, target_beta, trigger_level, rolling_window = 12, secondary_investment = "CASH"):
        """This function is called to implement the investment strategy.
        reference_index: string, one of the constituents of the investment_universe. This is the security that will produce our alpha signals
        target beta: float, equivalent to the beta/weight of the reference_index that we want to keep when UW 
        trigger_level: float, level of the Sharpe Ratio that will trigger the UW/OW
        rolling_window: int, number of observations used to compute the Sharpe Ratio. 12 by default as we are working with monthly data
        secondary_investment: string, security in the investment universe where we will allocate cash when UW """
        # loading the required data
        self.load_Treasury_Par_Yield_Curve()
        
        # creating the some attributes
        self.reference_index = reference_index
        self.rolling_window = rolling_window
        self.target_beta = target_beta
        self.trigger_level = trigger_level
        
        self.strategy_data = pd.merge(self.returns, self.rf[["1 Yr"]], how = "left", left_index = True, right_index=True)
        self.strategy_data.fillna(method='ffill', inplace=True)
        
        #computing the rolling Sharpe Ratio
        self.strategy_data["rolling_ret"] = (((self.strategy_data[reference_index]+1).rolling(self.rolling_window).apply(np.prod)) ** (12/self.rolling_window)) - 1
        self.strategy_data["rolling_vol"] = ((self.strategy_data[reference_index]).rolling(self.rolling_window).apply(np.std)) * (12 ** 0.5)
        self.strategy_data["rolling_Sharpe_Ratio"] = (self.strategy_data["rolling_ret"] - self.strategy_data["1 Yr"]).div(self.strategy_data["rolling_vol"])
        
        #creating signals
        self.strategy_data.loc[(self.strategy_data["rolling_Sharpe_Ratio"].shift(2) < trigger) & (self.strategy_data["rolling_Sharpe_Ratio"].shift(1) >= trigger), "Trade"] = "Sell"
        self.strategy_data.loc[(self.strategy_data["rolling_Sharpe_Ratio"].shift(2) > trigger) & (self.strategy_data["rolling_Sharpe_Ratio"].shift(1) <= trigger), "Trade"] = "Buy"
        
        # relevant dates
        self.all_trading_dates = [trade_date.date() for trade_date in self.strategy_data.loc[self.strategy_data["Trade"].isna()==False].index]
        self.sell_dates = [trade_date.date() for trade_date in self.strategy_data.loc[self.strategy_data["Trade"]=="Sell"].index]
        self.buy_dates = [trade_date.date() for trade_date in self.strategy_data.loc[self.strategy_data["Trade"]=="Buy"].index]
        
        #trading the startegy
        self.rebalance(self.strategy_data.index[0].date(), {self.reference_index: 1})
        for date in all_trading_dates:
            if date in self.sell_dates:
                self.rebalance(date, {self.reference_index: self.target_beta, secondary_investment: (1-beta)})
            elif date in self.buy_dates:
                self.rebalance(date, {self.reference_index: 1})
